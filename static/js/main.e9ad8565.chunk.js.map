{"version":3,"sources":["components/AccountBalance.js","components/Home.js","components/UserProfile.js","components/Login.js","components/Credits.js","components/Debits.js","App.js","reportWebVitals.js","index.js"],"names":["AccountBalance","accountBalance","this","props","balance","toFixed","style","position","top","right","backgroundColor","padding","borderRadius","boxShadow","Component","Home","src","alt","to","UserProfile","userName","memberSince","LogIn","handleChange","e","updatedUser","state","user","target","value","setState","handleSubmit","preventDefault","mockLogIn","redirect","password","onSubmit","type","name","defaultValue","onChange","Credits","console","log","credits","useState","description","updateDescription","amount","updateAmount","listSize","length","allCredits","i","curCredit","push","id","date","slice","event","newCredit","parseFloat","Date","toISOString","addCredit","htmlFor","step","Debits","debits","allDebits","curDebit","App","logInInfo","newUser","currentUser","credit","newCreditList","creditList","newAccountBalance","calculateBalance","debitList","addDebit","debit","newDebitList","reduce","total","fetch","then","response","json","data","basename","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e9ad8565.chunk.js","sourcesContent":["/*==================================================\nsrc/components/AccountBalance.js\n\nThe AccountBalance component displays account balance. It is included in other page views.\n==================================================*/\nimport React, { Component } from 'react';\n\nclass AccountBalance extends Component {\n  render() {\n    const { accountBalance } = this.props; // Access accountBalance from props\n    const balanceStyle = {\n      position: 'fixed',\n      top: '10px',\n      right: '10px',\n      backgroundColor: '#fff',\n      padding: '5px 10px',\n      borderRadius: '5px',\n      boxShadow: '0 0 10px rgba(0, 0, 0, 0.1)',\n    };\n    //trying to fix bug\n    // First we check if accountBalance is a number before calling toFixed\n    const balance = typeof accountBalance === 'number' ? accountBalance.toFixed(2) : \"Loading...\";\n    return (\n      <div style={balanceStyle}>\n        Balance: {balance}\n      </div>\n    );\n  }\n}\n\nexport default AccountBalance;\n\n","/*==================================================\nsrc/components/Home.js\n\nThe Home component is used to demonstrate the use of Link.\n==================================================*/\nimport React, {Component} from 'react';\nimport AccountBalance from './AccountBalance';\nimport {Link} from 'react-router-dom';\n\nclass Home extends Component {\n  render() {\n    return (\n      <div>\n        <img src=\"https://picsum.photos/200/200\" alt=\"bank\"/>\n\n        <h1>Bank of React</h1>\n\n        <Link to=\"/userProfile\">User Profile</Link>\n        <br/>\n        <Link to=\"/login\">Login</Link>\n        <br/>\n        <Link to=\"/credits\">Credits (to be implemented in the Assignment)</Link>\n        <br/>\n        <Link to=\"/debits\">Debits (to be implemented in the Assignment)</Link>\n        <br/><br/>\n        <AccountBalance accountBalance={this.props.accountBalance}/>\n      </div>\n    );\n  }\n}\n\nexport default Home;","/*==================================================\nsrc/components/UserProfile.js\n\nThe UserProfile component is used to demonstrate the use of Route and Link.\nNote: You don't need to work on this file for the Assignment.\n==================================================*/\nimport React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\n\nclass UserProfile extends Component {\n  render() {\n    return (\n      <div>\n        <h1>User Profile</h1>\n\n        <div>Username: {this.props.userName}</div>\n        <div>Member Since: {this.props.memberSince}</div>\n        <br/>\n        <Link to=\"/\">Return to Home</Link>\n      </div>\n    );\n  }\n}\n\nexport default UserProfile;","/*==================================================\nsrc/components/Login.js\n\nThe LogIn component is used to demonstrate the use of Redirect.\nNote: You don't need to work on this file for the Assignment.\n==================================================*/\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport {Link} from 'react-router-dom';\n\nclass LogIn extends Component {\n  constructor (props) {  // Create and initialize state\n    super(props)\n    this.state = {\n      user: {\n        //userName: '',\n        userName: this.props.user.userName,  // Initialize userName using props input (currentUser in App.js)\n        password: ''\n      },\n      redirect: false  // Redirect property used to trigger Redirect\n    }\n  }\n\n  // When User Name input is changed, capture the new input value and update state\n  handleChange = (e) => {\n    const updatedUser = {...this.state.user};  // Create an object for state\n    updatedUser.userName = e.target.value;  // Set object's userName to the new input value\n    this.setState({user: updatedUser})  // Update state with object values\n  }\n\n  // When user clicked \"Log In\" button, store user data and then redirect to \"User Profile\" page\n  handleSubmit = (e) => {\n    e.preventDefault()\n    this.props.mockLogIn(this.state.user)  // Update state in the top-level component (App.js)\n    this.setState({redirect: true})  // Update state to trigger Redirect\n  }\n  \n  render () {\n    // Redirect to \"User Profile\" page when \"Log In\" button is clicked\n    if (this.state.redirect) {  \n      return (<Redirect to=\"/userProfile\"/>);\n    }\n\n    // Render the login form (and call \"handleSubmit\" method when \"Log In\" button is clicked to submit form)\n    return (\n      <div>\n        <h1>Login</h1>\n        \n        <form onSubmit={this.handleSubmit}>\n          <div>\n            <label>User Name</label>\n            <input type=\"text\" name=\"userName\" defaultValue={this.props.user.userName} onChange={this.handleChange} />\n          </div>\n          <div>\n            <label>Password</label>\n            <input type=\"password\" name=\"password\" />\n          </div>\n          <button>Log In</button>\n        </form>  \n        <br/>\n        <Link to=\"/\">Return to Home</Link>\n      </div>\n    );\n  }\n}\n\nexport default LogIn;","/*==================================================\nsrc/components/Credits.js\n\nThe Credits component contains information for Credits page view.\nNote: You need to work on this file for the Assignment.\n==================================================*/\nimport {Link} from 'react-router-dom';\nimport React, { useState } from 'react';\n\nconst Credits = (props) => {\n  console.log('Credit props:', props.credits);\n  const {credits} = props; //We get the creditList from App.js\n  console.log(credits);\n  const [description, updateDescription] = useState('');\n  const [amount, updateAmount] = useState(0);\n  \n  const listSize = credits.length;\n  const allCredits = [];\n  //Iterate through the credit list and push to a new allCredits array we will display\n  for(let i=0; i<listSize; i++){\n  \tconst curCredit = credits[i];\n  \tallCredits.push(\n  \t\t<li key={i}>\n  \t\t<h3>ID:</h3> {curCredit.id} <br />\n  \t\t<h3>Description:</h3> {curCredit.description} <br />\n  \t\t<h3>Amount:</h3> ${curCredit.amount} <br />\n  \t\t<h3>Date:</h3> {curCredit.date.slice(0,10)} <br />\n  \t\t<hr /> {/* I added this line to seperate between the credit entries */}\n  \t\t</li>\n  \t);\n  }\n  \n  const changeDescription = (event) =>{\n  \tupdateDescription(event.target.value); //sets the global description to new description\n  };\n  \n  const changeAmount = (event) =>{\n  \tupdateAmount(event.target.value); //sets the global amount to new description\n  };\n  \n  const pushCredit = (event) => {\n  \tevent.preventDefault(); //This apparently stops form submission which we don't want\n  \t\n  \t//we then create a new credit with the information we got from form\n  \tconst newCredit = {\n  \t\tid: allCredits.length +1,\n  \t\tdescription: description,\n  \t\tamount: parseFloat(amount).toFixed(2), //This makes sure that we only get up to 2 decimals\n  \t\tdate: new Date().toISOString(),//This just gets the current system time and formats it correctly\n  \t};\n  \t\n  \tprops.addCredit(newCredit);//This essentially updates the creditList to add the new credit\n  \tupdateDescription('');\n    \tupdateAmount(0);\n    \t//we reset Description and Amount and clear the form\n  };\n  \n  return (\n    <div>\n      <h1>Credits</h1>\n      <br/>\n      {/* add a form to take user input for new credits*/}\n      <h2>Add Credit: </h2>\n      \t<form onSubmit={pushCredit}>\n \t<label htmlFor=\"description\">Description</label>\n  \t<input type=\"text\" id=\"description\" value={description} onChange={changeDescription} />\n  \t<label htmlFor=\"amount\">Amount</label>\n \t<input type=\"number\" id=\"amount\" value={amount} onChange={changeAmount} step=\"0.01\" />\n \t<button type=\"submit\">Add</button>\n\t</form>\n      <ul>{allCredits}</ul> \n      <Link to=\"/\">Return to Home</Link>\n    </div>\n  );\n}\n\nexport default Credits;\n","/*==================================================\nsrc/components/Debits.js\n\nThe Debits component contains information for Debits page view.\nNote: You need to work on this file for the Assignment.\n==================================================*/\nimport {Link} from 'react-router-dom';\n\nconst Debits = (props) => {\n  console.log('Debit props:', props.debits);\n  const {debits} = props; //We get the debitList from App.js\n  console.log(debits);\n  const listSize = debits.length;\n  const allDebits = [];\n  //Iterate through the debit list and push to a new allDebits array we will display\n  for(let i=0; i<listSize; i++){\n  \tconst curDebit = debits[i];\n  \tallDebits.push(\n  \t\t<li key={curDebit.id}>\n  \t\t<h3>ID:</h3> {curDebit.id} <br />\n  \t\t<h3>Description:</h3> {curDebit.description} <br />\n  \t\t<h3>Amount:</h3> ${curDebit.amount} <br />\n  \t\t<h3>Date:</h3> {curDebit.date.slice(0,10)} <br />\n  \t\t<hr /> {/* I added this way of rendering so it resembles the credits page */}\n  \t\t</li>\n  \t);\n  }\n  \n  return (\n    <div>\n      <h1>Debits</h1>\n      <br/>\n      <ul>{allDebits}</ul> \n      <Link to=\"/\">Return to Home</Link>\n    </div>\n  );\n}\n\nexport default Debits;\n","/*==================================================\nsrc/App.js\n\nThis is the top-level component of the app.\nIt contains the top-level state.\n==================================================*/\nimport React, {Component} from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\n\n// Import other components\nimport Home from './components/Home';\nimport UserProfile from './components/UserProfile';\nimport LogIn from './components/Login';\nimport Credits from './components/Credits';\nimport Debits from './components/Debits';\nimport AccountBalance from './components/AccountBalance';\n\nclass App extends Component {\n  constructor() {  // Create and initialize state\n    super(); \n    this.state = {\n      accountBalance: 0,\n      creditList: [],\n      debitList: [],\n      currentUser: {\n        userName: 'Joe Smith',\n        memberSince: '11/22/99',\n      }\n    };\n  }\n\n  // Update state's currentUser (userName) after \"Log In\" button is clicked\n  mockLogIn = (logInInfo) => {  \n    const newUser = {...this.state.currentUser};\n    newUser.userName = logInInfo.userName;\n    this.setState({currentUser: newUser})\n  }\n  \n  addCredit = (credit) => {\n    const newCreditList = [...this.state.creditList, credit];\n    const newAccountBalance = this.calculateBalance(newCreditList, this.state.debitList); //we call this do update Balance\n    this.setState({creditList: newCreditList, accountBalance: newAccountBalance});\n     console.log('New Balance:', newAccountBalance); // Log new balance for testing purpoises\n  }\n  \n  addDebit = (debit) => {\n    const newDebitList = [...this.state.debitList, debit];\n    const newAccountBalance = this.calculateBalance(this.state.creditList, newDebitList); //same as before, update balance\n    this.setState({debitList: newDebitList, accountBalance: newAccountBalance});\n  }\n  //This function basically updates the balance using the credits-debits formula\n  calculateBalance = (credits, debits) => {\n    const totalCredits = credits.reduce((total, credit) => total + parseFloat(credit.amount), 0);\n    const totalDebits = debits.reduce((total, debit) => total + parseFloat(debit.amount), 0);\n    return totalCredits - totalDebits;\n  }\n  \n  componentDidMount(){\n  \t\n  \t//fetch credit API\n  \tfetch('https://johnnylaicode.github.io/api/credits.json') \n  \t.then(response => response.json())\n  \t.then(data => {\n  \t\tthis.setState({ creditList: data});\n  \t\tconsole.log(data);\n  \t\n  \t});\n  \t\n  \t//fetch debits API\n  \tfetch('https://johnnylaicode.github.io/api/debits.json') \n  \t.then(response => response.json())\n  \t.then(data => {\n  \t\tthis.setState({ debitList: data }, () => {\n        \t  //We call a calucate after both API's load  to have an accurate starter balance\n       \t\t  const newAccountBalance = this.calculateBalance(this.state.creditList, this.state.debitList);\n        \t  this.setState({ accountBalance: newAccountBalance });\n      \t\t});\n  \t});\n  }\n\n  // Create Routes and React elements to be rendered using React components\n  render() {  \n    // Create React elements and pass input props to components\n    const HomeComponent = () => (<Home accountBalance={this.state.accountBalance} />)\n    const UserProfileComponent = () => (\n      <UserProfile userName={this.state.currentUser.userName} memberSince={this.state.currentUser.memberSince} />\n    )\n    const LogInComponent = () => (<LogIn user={this.state.currentUser} mockLogIn={this.mockLogIn} />)\n    const CreditsComponent = () => (\n \t <div>\n    \t\t<AccountBalance accountBalance={this.state.accountBalance} />\n   \t \t<Credits credits={this.state.creditList} addCredit={this.addCredit} />\n  \t</div>\n    );\n    const DebitsComponent = () => (<Debits debits={this.state.debitList} />) \n    const AccountBalanceComponent = () => (<AccountBalance accountBalance={this.state.accountBalance} />) \n\n    // Important: Include the \"basename\" in Router, which is needed for deploying the React app to GitHub Pages\n    return (\n      <Router basename=\"/assignment-3\">\n        <div>\n          <Route exact path=\"/\" render={HomeComponent}/>\n          <Route exact path=\"/userProfile\" render={UserProfileComponent}/>\n          <Route exact path=\"/login\" render={LogInComponent}/>\n          <Route exact path=\"/credits\" render={CreditsComponent}/>\n          <Route exact path=\"/debits\" render={DebitsComponent}/>\n          <Route exact path=\"/accountBalance\" render={AccountBalanceComponent}/>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/*==================================================\nsrc/index.js\n\nThis file renders the top-level component App which contains all components of the app).\n==================================================*/\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n// Note: In above, StrictMode is a tool for highlighting potential problems in an application. \n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}